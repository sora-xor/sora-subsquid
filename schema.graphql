enum SnapshotType {
	DEFAULT
	HOUR
	DAY
	MONTH
}

type NetworkStats @entity {
	id: ID!
	totalFees: BigInt!
	totalAccounts: Int!
	totalTransactions: Int!
	totalBridgeIncomingTransactions: Int!
	totalBridgeOutgoingTransactions: Int!
	updatedAtBlock: Int!
}

type NetworkSnapshot @entity {
	id: ID!
	type: SnapshotType!
	timestamp: Int!
	accounts: Int!
	transactions: Int!
	fees: BigInt!
	liquidityUSD: String!
	volumeUSD: String!
	bridgeIncomingTransactions: Int!
	bridgeOutgoingTransactions: Int!
	updatedAtBlock: Int!
}

type Asset @entity {
	id: ID!
	data: [AssetSnapshot!]! @derivedFrom(field: "asset")
	poolXYK: [PoolXYK] @derivedFrom(field: "targetAsset")
	priceUSD: String!
	supply: BigInt!
	liquidity: BigInt! # locked in pairs (in tokens)
	updatedAtBlock: Int!
}

type AssetPrice @jsonField {
	open: String!
	close: String!
	high: String!
	low: String!
}

type AssetVolume @jsonField {
	amount: String!
	amountUSD: String!
}

type AssetSnapshot @entity {
	id: ID!
	asset: Asset! @index #relation to Asset
	timestamp: Int!
	type: SnapshotType!
	priceUSD: AssetPrice
	volume: AssetVolume
	liquidity: BigInt # locked in pairs (in tokens)
	supply: BigInt!
	mint: BigInt!
	burn: BigInt!
	updatedAtBlock: Int!
}

type PoolXYK @entity {
	id: ID!
	baseAsset: Asset!
	targetAsset: Asset!
	baseAssetReserves: BigInt!
	targetAssetReserves: BigInt!
	multiplier: Int!
	priceUSD: String
	strategicBonusApy: String
	updatedAtBlock: Int!
}

type Account @entity {
	id: ID!
	latestHistoryElement: HistoryElement
	updatedAtBlock: Int!
}

type HistoryElement @entity {
	id: ID!
	blockHeight: BigInt!
	blockHash: String! @index
	module: String!
	method: String!
	address: String! @index
	networkFee: String!
	execution: ExecutionResult!
	timestamp: Int!
	data: JSON
	dataTo: String @index
	dataFrom: String @index
	calls: [HistoryElementCall!]! @derivedFrom(field: "historyElement")
	callNames: [String]!
	updatedAtBlock: Int!
}

type HistoryElementCall @entity {
	id: ID!
	historyElement: HistoryElement! @index #relation to HistoryElement
	module: String!
	method: String!
	data: JSON!
	updatedAtBlock: Int!
}

type ExecutionResult @jsonField {
	success: Boolean!
	error: ExecutionError
}

type ExecutionError @jsonField {
	moduleErrorId: Int
	moduleErrorIndex: Int
	nonModuleErrorMessage: String
}

type ReferrerReward @entity {
	id: ID!
	referral: String! @index
	referrer: String!
	updated: Int!
	amount: BigInt!
	updatedAtBlock: Int!
}

type StakingReward @entity {
	id: ID!
	account: String! @index
	amount: BigInt!
	updatedAtBlock: Int!
}
